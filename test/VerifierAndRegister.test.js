const { ethers } = require("hardhat");
const { assert, expect } = require('chai')

describe("TurboVerifier & ProofRegister contracts", function () {
  let verifierContract;
  let registerContract;
  beforeEach(async () => {
    const verifierDeployer = await ethers.getContractFactory("TurboVerifier")
    const verifierDeployed = await verifierDeployer.deploy()
    verifierContract = await verifierDeployed.deployed()
    const verifierAddy = verifierContract.address
    const registerDeployer = await ethers.getContractFactory("ProofRegister")
    const registerDeployed = await registerDeployer.deploy(verifierAddy)
    registerContract = await registerDeployed.deployed();
  })
  describe('deployments', async function () {
    it('TurboVerifier deploys successfully', async function () {
      const verifierAddy = verifierContract.address
      assert.notEqual(verifierAddy, 0x0)
      assert.notEqual(verifierAddy, '')
      assert.notEqual(verifierAddy, null)
      assert.notEqual(verifierAddy, undefined)
    })
    it('ProofRegister deploys successfully', async function () {
      const registerAddy = registerContract.address
      assert.notEqual(registerAddy, 0x0)
      assert.notEqual(registerAddy, '')
      assert.notEqual(registerAddy, null)
      assert.notEqual(registerAddy, undefined)
    })
  })
  // TODO: fix this. For now it's throwing panic code 17 which is an overflow problem. Problem from ethers.js?
  describe('proof verifications', async function () {
    it('verify valid proof as expected', async function () {
      // Verify valid proof generated by `nargo prove p` -- see ./src/main.nr
      const proof = `147f405ff9bef7b985e6b4efc555a26dda5a5a36df22850926e885ac5d8bd57e263270cc4252d42a63e1a66e06dc4b4161e7b40bfaf4d0b1ab229ef91961171721bbbcec49907b1e6636fee26682872cd64111024f5d4d4760326129eaae4a4d1b29dc676f3112e8c6d771968551d24926a84242eb5142d05db5d3cd2e4908421cbbdd90a209385f64c9b7d002712aeaa2e41bde4f0eabd3c29213f3cf3a38fc0690a5b75138e66623947a975fbd880636dbb01bcf541a7720179a318b340f972414c527548d7521378e4e242a0c83dd71195de2db31f6fed22741d01e0e90bf21e147355f11114d7d7a490ec18ba8e6c4649eaa419316ac265e1f16b8e55a340fc2e4b7ef0b2a1c2b13182a476580a0eb805b29b8994fae987a22504a4480e31ca7c1c33b612d5371b5f755dad7f232cbf6d4fef1fec99f412134a99ecf3f772755099576b82d18b9be3be7a78ecc04a06eeeb184c0ca4fb9131a1e063b6a1810ba0b8a7163a34925d86e8ecc8f3c99111b1fe6ffcaa92099575abdc468669b11981ab327906590357f156784eec76f0c0cf5f91bcf5758fb9dd7f49b4fd8f905a7efb5005271b543dca773ae6b9460b83030629326055fcd6fc168d40e73970924c5b08b55c2d57295da01dd4690decf30c85bc48dcf8ac14de508d917aace235a12b477ae38cd7b2228e3726d5c5723d7c84fabdafdef89e604d2d48eb1920a2b3763e6492562e615f6433d0f3f38ade6a5c30fc4b797165a0a8765196410122946089ab743932d23b3d8c7f29194b719e6f4978f7c1ccc31cc2d71f459392fac0123e1aed1e1c8c0528df4249094171e813ea23d8c6c25a30aa1a290105b0d6dd143176bae61b0c24b1bc48e6284c4da6fba8c5c97c5ce630f32baddc54f0dfdd0031cce6b5f5ec221a886cc12e7fb27ede99ae2f5985e3d8832de30115f23213f540d6f627e45f272970f3bf50f2c923240a85b73e0627729f746a7155306156851e4564710db5eeaadf1fbf4a9fea09475a318ab2e18b99ebeff608881295b2e21f872791dd449850a2785b77860d143c65139c7b3436d469c11ee3a6015da0d2925addb4b7cbca86c4181373b17beee34b9db988891955b617146112a1ce6a94e58be647c4a390b698843333a71b3f46252c6d93d7ab95652308e76550e726e7feea3552f590a7682a60035266c565d6899f267b8c6470036a8e4b277265618b7bd5a72d970ba975719a2035c168b9bec93844f6669d6ca26e76a16081c44b69a8c9e2cf003d742dc1f9af99e27eca616e5b06c9a0bff481b08ec60660441d37be5e675b788f29f1232533e4ef8e20c8d8880f07b18a0b81d27d45e5d2236fec1b2b21e2a73c021fb922b0b0015ceed2d5205829963f384b2a3348bfb1de1ce11dd8e8814cd7608d23ce898908bbf346152b96449325bf652c96f13e8153566c3d3a74b5d8228e4336992a60210119a38f2560b790cee3cf828205dac21b8356721e5d097ab8be42a94708889a7f59497384e76b996ca158e6547d8e306e766c1514a1b19d9d5ed3c443a280391caef71fa2baa28abdf685a6d56c9bb114708a35aaea8d07f2c0376ec65e893151ab154d1dc5c686f2533fc966232e309822bc003442c718578aa0eb5685c9ac24f98589d32dcced6aed659892c807b`
      const proofBytes = Uint8Array.from(Buffer.from(proof, 'hex'));
      // console.log(proofBytes.map(b => "0x" + b.toString(16)).join(','))
      // console.log(proofBytes)
      let proofIsValid = await verifierContract.verify(proofBytes)
      assert(proofIsValid)
    })
    it('fails to verify invalid proof', async function () {
      // Random proof would be invalid
      const proof = `69`
      const proofBytes = Uint8Array.from(Buffer.from(proof, 'hex'));
      let proofIsValid = await verifierContract.verify(proofBytes)
      assert(!proofIsValid)
    })
  })
})
